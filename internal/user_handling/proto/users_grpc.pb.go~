// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/users.proto

package user_handling_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserHandlingClient is the client API for UserHandling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserHandlingClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	AuthUser(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error)
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserHandling_ListUsersClient, error)
}

type userHandlingClient struct {
	cc grpc.ClientConnInterface
}

func NewUserHandlingClient(cc grpc.ClientConnInterface) UserHandlingClient {
	return &userHandlingClient{cc}
}

func (c *userHandlingClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_handling_proto.UserHandling/addUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlingClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_handling_proto.UserHandling/deleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlingClient) AuthUser(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/user_handling_proto.UserHandling/authUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlingClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserHandling_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserHandling_ServiceDesc.Streams[0], "/user_handling_proto.UserHandling/listUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userHandlingListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserHandling_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userHandlingListUsersClient struct {
	grpc.ClientStream
}

func (x *userHandlingListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserHandlingServer is the server API for UserHandling service.
// All implementations must embed UnimplementedUserHandlingServer
// for forward compatibility
type UserHandlingServer interface {
	AddUser(context.Context, *User) (*Response, error)
	DeleteUser(context.Context, *User) (*Response, error)
	AuthUser(context.Context, *Key) (*Response, error)
	ListUsers(*emptypb.Empty, UserHandling_ListUsersServer) error
	mustEmbedUnimplementedUserHandlingServer()
}

// UnimplementedUserHandlingServer must be embedded to have forward compatible implementations.
type UnimplementedUserHandlingServer struct {
}

func (UnimplementedUserHandlingServer) AddUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserHandlingServer) DeleteUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserHandlingServer) AuthUser(context.Context, *Key) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedUserHandlingServer) ListUsers(*emptypb.Empty, UserHandling_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserHandlingServer) mustEmbedUnimplementedUserHandlingServer() {}

// UnsafeUserHandlingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserHandlingServer will
// result in compilation errors.
type UnsafeUserHandlingServer interface {
	mustEmbedUnimplementedUserHandlingServer()
}

func RegisterUserHandlingServer(s grpc.ServiceRegistrar, srv UserHandlingServer) {
	s.RegisterService(&UserHandling_ServiceDesc, srv)
}

func _UserHandling_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlingServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_handling_proto.UserHandling/addUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlingServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandling_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlingServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_handling_proto.UserHandling/deleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlingServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandling_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHandlingServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_handling_proto.UserHandling/authUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHandlingServer).AuthUser(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHandling_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserHandlingServer).ListUsers(m, &userHandlingListUsersServer{stream})
}

type UserHandling_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userHandlingListUsersServer struct {
	grpc.ServerStream
}

func (x *userHandlingListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// UserHandling_ServiceDesc is the grpc.ServiceDesc for UserHandling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserHandling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_handling_proto.UserHandling",
	HandlerType: (*UserHandlingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addUser",
			Handler:    _UserHandling_AddUser_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _UserHandling_DeleteUser_Handler,
		},
		{
			MethodName: "authUser",
			Handler:    _UserHandling_AuthUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listUsers",
			Handler:       _UserHandling_ListUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/users.proto",
}
